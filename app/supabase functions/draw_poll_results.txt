
DECLARE
    poll_record RECORD;
    entry_record RECORD;
    result_count INTEGER;
    result JSON;
BEGIN
    -- Get poll details
    SELECT * INTO poll_record FROM polls WHERE id = poll_uuid;
    
    IF NOT FOUND THEN
        RETURN json_build_object('success', false, 'error', 'Poll not found');
    END IF;
    
    -- Check if results already drawn
    IF poll_record.results_drawn THEN
        RETURN json_build_object('success', false, 'error', 'Results already drawn');
    END IF;
    
    -- For first_come_first_serve polls, results should already exist
    -- Just verify and mark as drawn
    IF poll_record.selection_type = 'first_come_first_serve' THEN
        -- Check if results exist, if not create them from entries
        SELECT COUNT(*) INTO result_count
        FROM poll_results 
        WHERE poll_id = poll_uuid;
        
        -- If no results exist but entries do, create results from entries
        -- This handles edge cases where FCFS entries exist but results don't
        IF result_count = 0 THEN
            RAISE NOTICE 'FCFS poll has no results, creating from entries';
            
            -- For FCFS, all entries should become results (they already won when they entered)
            INSERT INTO poll_results (poll_id, user_id, spot_type, created_at)
            SELECT poll_id, user_id, spot_type, created_at
            FROM poll_entries 
            WHERE poll_id = poll_uuid;
            
            GET DIAGNOSTICS result_count = ROW_COUNT;
            RAISE NOTICE 'Created % FCFS results from entries', result_count;
        END IF;
        
        -- Mark as drawn
        UPDATE polls 
        SET results_drawn = true, is_active = false, updated_at = NOW()
        WHERE id = poll_uuid;
        
        RETURN json_build_object(
            'success', true, 
            'message', 'FCFS poll results confirmed',
            'results_created', result_count
        );
    END IF;
    
    -- For random selection polls, draw random winners
    RAISE NOTICE 'Drawing random results for poll: %', poll_uuid;
    
    -- Delete any existing results (in case of re-draw)
    DELETE FROM poll_results WHERE poll_id = poll_uuid;
    
    -- Draw AM winners
    IF poll_record.am_spots > 0 THEN
        INSERT INTO poll_results (poll_id, user_id, spot_type)
        SELECT poll_uuid, user_id, 'am'
        FROM poll_entries 
        WHERE poll_id = poll_uuid AND spot_type = 'am'
        ORDER BY RANDOM()
        LIMIT poll_record.am_spots;
        
        RAISE NOTICE 'Drew % AM winners (max: %)', 
            (SELECT COUNT(*) FROM poll_results WHERE poll_id = poll_uuid AND spot_type = 'am'),
            poll_record.am_spots;
    END IF;
    
    -- Draw PM winners
    IF poll_record.pm_spots > 0 THEN
        INSERT INTO poll_results (poll_id, user_id, spot_type)
        SELECT poll_uuid, user_id, 'pm'
        FROM poll_entries 
        WHERE poll_id = poll_uuid AND spot_type = 'pm'
        ORDER BY RANDOM()
        LIMIT poll_record.pm_spots;
        
        RAISE NOTICE 'Drew % PM winners (max: %)', 
            (SELECT COUNT(*) FROM poll_results WHERE poll_id = poll_uuid AND spot_type = 'pm'),
            poll_record.pm_spots;
    END IF;
    
    -- Draw All Day winners
    IF poll_record.all_day_spots > 0 THEN
        INSERT INTO poll_results (poll_id, user_id, spot_type)
        SELECT poll_uuid, user_id, 'all_day'
        FROM poll_entries 
        WHERE poll_id = poll_uuid AND spot_type = 'all_day'
        ORDER BY RANDOM()
        LIMIT poll_record.all_day_spots;
        
        RAISE NOTICE 'Drew % All Day winners (max: %)', 
            (SELECT COUNT(*) FROM poll_results WHERE poll_id = poll_uuid AND spot_type = 'all_day'),
            poll_record.all_day_spots;
    END IF;
    
    -- Mark poll as complete
    UPDATE polls 
    SET results_drawn = true, is_active = false, updated_at = NOW()
    WHERE id = poll_uuid;
    
    -- Count total results
    SELECT COUNT(*) INTO result_count
    FROM poll_results 
    WHERE poll_id = poll_uuid;
    
    RETURN json_build_object(
        'success', true, 
        'message', 'Random results drawn successfully',
        'total_winners', result_count
    );
    
EXCEPTION 
    WHEN OTHERS THEN
        RAISE WARNING 'Error in draw_poll_results for %: %', poll_uuid, SQLERRM;
        RETURN json_build_object(
            'success', false, 
            'error', 'Database error: ' || SQLERRM
        );
END;
